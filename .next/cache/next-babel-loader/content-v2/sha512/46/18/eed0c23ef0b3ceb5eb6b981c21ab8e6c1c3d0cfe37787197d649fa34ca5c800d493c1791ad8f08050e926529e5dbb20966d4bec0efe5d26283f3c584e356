{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\NextJS\\\\meetup-app\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from '../../components/meetups/MeetupDetails';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const password = 'NvJkMkQ5cxnP2apd';\n  const client = await MongoClient.connect('mongodb+srv://rohan:' + password + '@cluster0.yvlu5.mongodb.net/myFirstDatabase?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const password = 'NvJkMkQ5cxnP2apd';\n  const client = await MongoClient.connect('mongodb+srv://rohan:' + password + '@cluster0.yvlu5.mongodb.net/myFirstDatabase?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupId = context.params.meetupId;\n  const meetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        id: meetup._id.toString(),\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        description: meetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["E:/NextJS/meetup-app/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","password","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","findOne","console","log","id"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,wCAAzB;AACA,SAAQC,WAAR,EAAqBC,QAArB,QAAoC,SAApC;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,QAAQ,GAAG,kBAAjB;AAEA,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,yBAAuBF,QAAvB,GAAgC,yEAApD,CAArB;AACA,QAAMG,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA0B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA1B,EAAmCC,OAAnC,EAAtB;AACA,SAAO;AACPC,IAAAA,QAAQ,EAAE,KADH;AAEPC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAYC,MAAM,KAAG;AAAGC,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAAX;AAAX,KAAH,CAAlB;AAFA,GAAP;AAIH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA,QAAMlB,QAAQ,GAAG,kBAAjB;AAEA,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,yBAAuBF,QAAvB,GAAgC,yEAApD,CAArB;AACA,QAAMG,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMU,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAGA,QAAMF,MAAM,GAAG,MAAMT,iBAAiB,CAACe,OAAlB,CAA0B;AAACX,IAAAA,GAAG,EAACjB,QAAQ,CAACwB,QAAD;AAAb,GAA1B,CAArB;AAKAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AAEA,SAAO;AACLtB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACR4B,QAAAA,EAAE,EAACT,MAAM,CAACL,GAAP,CAAWQ,QAAX,EADK;AAERpB,QAAAA,KAAK,EAACiB,MAAM,CAACjB,KAFL;AAGRC,QAAAA,OAAO,EAACgB,MAAM,CAAChB,OAHP;AAIRF,QAAAA,KAAK,EAACkB,MAAM,CAAClB,KAJL;AAKRG,QAAAA,WAAW,EAACe,MAAM,CAACf;AALX;AADP;AADF,GAAP;AAWD;AAED,eAAeN,aAAf","sourcesContent":["import MeetupDetail from '../../components/meetups/MeetupDetails';\r\nimport {MongoClient, ObjectId} from 'mongodb';\r\n\r\nfunction MeetupDetails(props) {\r\n  return (\r\n    <MeetupDetail\r\n      image={props.meetupData.image}\r\n      title={props.meetupData.title}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n    />\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n    const password = 'NvJkMkQ5cxnP2apd'\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://rohan:'+password+'@cluster0.yvlu5.mongodb.net/myFirstDatabase?retryWrites=true&w=majority')\r\n    const db = client.db();\r\n\r\n    const meetupsCollection = db.collection('meetups');\r\n\r\n    const meetups = await meetupsCollection.find({},{_id:1}).toArray();\r\n    return {\r\n    fallback: false,\r\n    paths: meetups.map(meetup=>({  params: {meetupId: meetup._id.toString()}}))\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  // fetch data for a single meetup\r\n  const password = 'NvJkMkQ5cxnP2apd'\r\n\r\n  const client = await MongoClient.connect('mongodb+srv://rohan:'+password+'@cluster0.yvlu5.mongodb.net/myFirstDatabase?retryWrites=true&w=majority')\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection('meetups');\r\n  const meetupId = context.params.meetupId;\r\n\r\n\r\n  const meetup = await meetupsCollection.findOne({_id:ObjectId(meetupId)});\r\n  \r\n\r\n\r\n\r\n  console.log(meetupId);\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n          id:meetup._id.toString(),\r\n          title:meetup.title,\r\n          address:meetup.address,\r\n          image:meetup.image,\r\n          description:meetup.description\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}