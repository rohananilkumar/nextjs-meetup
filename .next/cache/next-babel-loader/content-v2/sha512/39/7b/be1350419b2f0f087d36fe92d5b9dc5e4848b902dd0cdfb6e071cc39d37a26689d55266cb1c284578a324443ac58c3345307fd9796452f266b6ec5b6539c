{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\NextJS\\\\meetup-app\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from '../../components/meetups/MeetupDetails';\nimport { MongoClient } from 'mongodb';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.image,\n    title: props.title,\n    address: props.address,\n    description: props.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const password = 'NvJkMkQ5cxnP2apd';\n  const client = await MongoClient.connect('mongodb+srv://rohan:' + password + '@cluster0.yvlu5.mongodb.net/myFirstDatabase?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const password = 'NvJkMkQ5cxnP2apd';\n  const client = await MongoClient.connect('mongodb+srv://rohan:' + password + '@cluster0.yvlu5.mongodb.net/myFirstDatabase?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupId = context.params.meetupId;\n  const meetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: meetup\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["E:/NextJS/meetup-app/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","MeetupDetails","props","image","title","address","description","getStaticPaths","password","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","findOne","console","log","meetupData"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,wCAAzB;AACA,SAAQC,WAAR,QAA0B,SAA1B;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,KADf;AAEE,IAAA,KAAK,EAAED,KAAK,CAACE,KAFf;AAGE,IAAA,OAAO,EAAEF,KAAK,CAACG,OAHjB;AAIE,IAAA,WAAW,EAAEH,KAAK,CAACI;AAJrB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,QAAQ,GAAG,kBAAjB;AAEA,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,yBAAuBF,QAAvB,GAAgC,yEAApD,CAArB;AACA,QAAMG,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA0B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA1B,EAAmCC,OAAnC,EAAtB;AACA,SAAO;AACPC,IAAAA,QAAQ,EAAE,KADH;AAEPC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAYC,MAAM,KAAG;AAAGC,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAAX;AAAX,KAAH,CAAlB;AAFA,GAAP;AAIH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA,QAAMlB,QAAQ,GAAG,kBAAjB;AAEA,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,yBAAuBF,QAAvB,GAAgC,yEAApD,CAArB;AACA,QAAMG,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMU,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAGA,QAAMF,MAAM,GAAG,MAAMT,iBAAiB,CAACe,OAAlB,CAA0B;AAACX,IAAAA,GAAG,EAACO;AAAL,GAA1B,CAArB;AAKAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AAEA,SAAO;AACLrB,IAAAA,KAAK,EAAE;AACL4B,MAAAA,UAAU,EAAET;AADP;AADF,GAAP;AAKD;AAED,eAAepB,aAAf","sourcesContent":["import MeetupDetail from '../../components/meetups/MeetupDetails';\r\nimport {MongoClient} from 'mongodb';\r\n\r\nfunction MeetupDetails(props) {\r\n  return (\r\n    <MeetupDetail\r\n      image={props.image}\r\n      title={props.title}\r\n      address={props.address}\r\n      description={props.description}\r\n    />\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n    const password = 'NvJkMkQ5cxnP2apd'\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://rohan:'+password+'@cluster0.yvlu5.mongodb.net/myFirstDatabase?retryWrites=true&w=majority')\r\n    const db = client.db();\r\n\r\n    const meetupsCollection = db.collection('meetups');\r\n\r\n    const meetups = await meetupsCollection.find({},{_id:1}).toArray();\r\n    return {\r\n    fallback: false,\r\n    paths: meetups.map(meetup=>({  params: {meetupId: meetup._id.toString()}}))\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  // fetch data for a single meetup\r\n  const password = 'NvJkMkQ5cxnP2apd'\r\n\r\n  const client = await MongoClient.connect('mongodb+srv://rohan:'+password+'@cluster0.yvlu5.mongodb.net/myFirstDatabase?retryWrites=true&w=majority')\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection('meetups');\r\n  const meetupId = context.params.meetupId;\r\n\r\n\r\n  const meetup = await meetupsCollection.findOne({_id:meetupId});\r\n  \r\n\r\n\r\n\r\n  console.log(meetupId);\r\n\r\n  return {\r\n    props: {\r\n      meetupData: meetup,\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}